# example5.minipy - Dictionary Operations and Complex Programme
# Demonstrates Stage 6 dictionary data structure and comprehensive language features

print "=== MiniPyLang Example 5: Dictionary Operations ==="

# Creating dictionaries
print "Dictionary Creation:"
person = {"name": "Alice", "age": 30, "city": "London"}
print "Person: " + str(person)

empty_dict = {}
print "Empty dictionary: " + str(empty_dict)

# Mixed key types
mixed_keys = {"string_key": "value1", 42: "numeric key", true: "boolean key"}
print "Mixed key types: " + str(mixed_keys)

# Dictionary access
print "Dictionary Access:"
name = person["name"]
age = person["age"]
print "Name: " + name
print "Age: " + str(age)

# Dictionary assignment (adding/modifying)
print "Dictionary Modification:"
person["email"] = "alice@example.com"
print "Added email: " + str(person)

person["age"] = 31
print "Updated age: " + str(person)

# Dictionary functions
print "Dictionary Functions:"

# Get all keys
all_keys = keys(person)
print "All keys: " + str(all_keys)

# Get all values
all_values = values(person)
print "All values: " + str(all_values)

# Check if key exists
has_name = has_key(person, "name")
has_phone = has_key(person, "phone")
print "Has 'name' key: " + str(has_name)
print "Has 'phone' key: " + str(has_phone)

# Remove key-value pairs
removed_email = del_key(person, "email")
print "Removed email: " + removed_email
print "After removal: " + str(person)

# Dictionary length
dict_size = len(person)
print "Dictionary size: " + str(dict_size)

# Complex dictionary operations
print "Complex Dictionary Usage:"

# Student database
students = {}
students["Alice"] = {"grade": 85, "subject": "Mathematics"}
students["Bob"] = {"grade": 92, "subject": "Physics"}
students["Charlie"] = {"grade": 78, "subject": "Chemistry"}

print "Student database: " + str(students)

# Process student data
print "Student Analysis:"
student_names = keys(students)
i = 0
total_grade = 0
student_count = len(students)

while (i < len(student_names)) {
    name = student_names[i]
    student_info = students[name]
    grade = student_info["grade"]
    subject = student_info["subject"]
    
    total_grade = total_grade + grade
    
    status = ""
    if (grade >= 90) {
        status = "Excellent"
    } else {
        if (grade >= 80) {
            status = "Good"
        } else {
            status = "Satisfactory"
        }
    }
    
    print name + " - " + subject + ": " + str(grade) + " (" + status + ")"
    i = i + 1
}

average = total_grade / student_count
print "Class average: " + str(average)

# Inventory management system
print "Inventory Management:"
inventory = {}
inventory["laptops"] = {"count": 15, "price": 999.99}
inventory["mice"] = {"count": 50, "price": 25.99}
inventory["keyboards"] = {"count": 30, "price": 79.99}

print "Initial inventory: " + str(inventory)

# Add new item
inventory["monitors"] = {"count": 8, "price": 299.99}
print "Added monitors: " + str(inventory)

# Update existing item
laptop_info = inventory["laptops"]
laptop_info["count"] = laptop_info["count"] - 3
inventory["laptops"] = laptop_info
print "Sold 3 laptops: " + str(inventory)

# Calculate total inventory value
print "Inventory Valuation:"
items = keys(inventory)
i = 0
total_value = 0.0

while (i < len(items)) {
    item_name = items[i]
    item_info = inventory[item_name]
    count = item_info["count"]
    price = item_info["price"]
    item_value = count * price
    
    print item_name + ": " + str(count) + " units × £" + str(price) + " = £" + str(item_value)
    total_value = total_value + item_value
    i = i + 1
}

print "Total inventory value: £" + str(total_value)

# Dictionary equality and comparison
print "Dictionary Equality:"
dict1 = {"a": 1, "b": 2}
dict2 = {"a": 1, "b": 2}
dict3 = {"b": 2, "a": 1}  # Same content, different order
dict4 = {"a": 1, "b": 3}

print "dict1: " + str(dict1)
print "dict2: " + str(dict2)
print "dict3: " + str(dict3)
print "dict4: " + str(dict4)

print "dict1 == dict2: " + str(dict1 == dict2)
print "dict1 == dict3: " + str(dict1 == dict3)
print "dict1 == dict4: " + str(dict1 == dict4)

# Working with boolean and numeric keys
print "Special Key Types:"
config = {}
config[true] = "enabled"
config[false] = "disabled"
config[0] = "zero"
config[1] = "one"

print "Config with boolean/numeric keys: " + str(config)
print "Value for true: " + config[true]
print "Value for 0: " + config[0]

# Comprehensive example: Simple contact book
print "Contact Book System:"
contacts = {}

# Add contacts
contacts["Alice"] = {"phone": "123-456-7890", "email": "alice@email.com", "city": "London"}
contacts["Bob"] = {"phone": "098-765-4321", "email": "bob@email.com", "city": "Manchester"}
contacts["Charlie"] = {"phone": "555-123-4567", "email": "charlie@email.com", "city": "Birmingham"}

print "Contact book created with " + str(len(contacts)) + " contacts"

# Search functionality
search_name = "Alice"
if (has_key(contacts, search_name)) {
    contact = contacts[search_name]
    print "Found " + search_name + ":"
    print "  Phone: " + contact["phone"]
    print "  Email: " + contact["email"]
    print "  City: " + contact["city"]
} else {
    print search_name + " not found in contacts"
}

# List all contacts
print "All Contacts:"
contact_names = keys(contacts)
i = 0
while (i < len(contact_names)) {
    name = contact_names[i]
    contact = contacts[name]
    print str(i + 1) + ". " + name + " (" + contact["city"] + ") - " + contact["phone"]
    i = i + 1
}

# Remove a contact
if (has_key(contacts, "Bob")) {
    removed_contact = del_key(contacts, "Bob")
    print "Removed Bob from contacts"
    print "Contacts remaining: " + str(len(contacts))
}

print "=== End of Example 5 ==="
print "MiniPyLang demonstrates complete programming language capabilities!"
print "Features: Variables, Control Flow, Lists, Dictionaries, Functions, and More!"